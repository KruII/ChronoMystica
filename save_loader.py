from datetime import datetime
import json
import os

import numpy as np

from pomocnicze.get_os_path import get_config_path

map_gen = """1111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1000000000000000011000000000000000000000000000000000000000000000000000000000000000001
1001000000000000001100000000000000000000000000000000000000000000000000000000000000001
1001001000000011111111111100000000000002222220000000000000000000000000000000000000001
1001001000000011111111111100000000000000222200000000011000011001100000000000000000001
1000000100000000000000000000000000000000222000000000011000011001100000000000000000001
1110000100000000000001000000000002220000220000000000000000000000000000000000000000001
1000000000011100011001000000000002220000000000000000000000000000000000000000010000001
1000000000011100011001000000000022200000000000000000000000000000001111111111110000001
1000000000011100000001000000022222222220000002222220000000000000000000000000010000001
1110000000000000000001000000000000000000000001100000000000000000000000000000010000001
1110010000000000000000000000000000000000000001100000000000000000000000000000010011001
1110010000000111111100000000000000000000000001100000000000100000000000000000010011001
1000010000000111111100000000000000000000000000000011111111100000000111111111110011001
1110010001111111111100000000000000000000000000000010000000000000000000000000010000001
1110010001111111111100000000022200222222000000000010000000000000011110000000010000001
1000010001111111111100000000010000000001000000000010000000000000111000000000010000001
1000010001100100110100000000010000000001000111111110000000000000001110000000010000001
1000010000000000100100000000010000000001000100000000001100000000111000000000010000001
1000010000000000000000000000010000000001000100000000011000000000001100000000010000001
1000010000000000000000000000010000000001000100000000110000000000111000000000010000001
1000011111111111111111111111110000000001111100000011000000000000011100000111111111111
1000000110000000000000000000000000000000000000000011000000000001111000000000000000001
1000000110000000000000000000000000000000000000000001100000000000011100000000000000001
1000000011000000000000000000000000000000022222000000111000000000001110000000000000001
1000000001100000001111111110000000000000002222200000001000000000011100000000000000001
2000000022000000000000222222222200000000000222000000002000000000000000000000000000002
2000000002200002220000000002222222200000000020000000002000000000000000000000000000002
2000000022000000022220000000000022222222200000000000002000000000022222222222000000002
2000000002200000000222200000000000022222220000000000002000000000020000000002000000002
2000000000220000000000220022000000000022220000000000002000000000000000000002000000002
2000000000022000000000022220000000000002200000000000002000000000010000000001000000001
1000000000001100000000001100000000000001100000000000001000000000011111111111000000001
1000000000000111111111111111110000000000110000000000000100000000000000000000000000001
1000000000000000000000000000000000000001100000000000001000000000000000000000000000001
1000000000011110000000000000000000000001111111111111111111111111111111000000000000001
1000000001111111100000000000001111110001100000000000000000000000000000000000000000001
1000011111111111111111100000001001100001100000000000000000000000000000000000000000001
1000000000111111111110000000001001000000000000000000000000111000000000000000000000001
1000000001111111110000000000001000000000000000000000000000011100000000000000000000001
1000000000111110000000000002222222222222222222222222222222222200000000000000000000002
2000000000022000000000000000000000000000222222222222222222222222222222222222000000002
2000000000000000000000000000000000000000000000000000000000022222222222222220000000001
1000000000000000000000000000000000000000000000000000000000000000000000000000000000001
1000000000000000000000000000000000000000000000000000000000000000000000000000000000001
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111"""

default_stats = {
                 "xp": 0,
                 "lvl": 1, 
                 "gold": 100, 
                 "eq": [], 
                 "hand": "SWORD", 
                 "points": 5, 
                 "stats": 
                     {
                      "strength": 0, 
                      "health": 0, 
                      "stamina": 0, 
                      "magic": 0, 
                      "inteligence": 0, 
                      "harisma": 0,
                      "lucky": 0,
                     },
                 "hp": 100,
                 "position": 
                     {
                      "x": 0, 
                      "y": 0, 
                      "z": 0,
                     },
                 "map": map_gen,
                 
                }

class Save_load:
    def __init__(self):
        self.saves = []
        self.load_saves()

    def load_saves(self):
        self.saves = []
        saves_dir = get_config_path("", "saves")  # Pobranie ścieżki do folderu 'saves'

        # Iteracja przez pliki w folderze 'saves'
        for file_name in os.listdir(saves_dir):
            file_path = os.path.join(saves_dir, file_name)
            if os.path.isfile(file_path):
                # Pobranie daty ostatniej modyfikacji pliku
                modification_time = os.path.getmtime(file_path)
                last_modified_date = datetime.fromtimestamp(modification_time)

                # Formatowanie daty jako słownika
                date_dict = {
                    "year": str(last_modified_date.year),
                    "month": str(last_modified_date.month),
                    "day": str(last_modified_date.day),
                    "hour": str(last_modified_date.hour),
                    "minute": str(last_modified_date.minute)
                }

                # Dodanie informacji o pliku do listy saves
                self.saves.append({
                    "Name": str(file_name)[:-5],
                    "Date": date_dict
                })
                
    def reset_saves(self, name):
        save_dir = get_config_path(name["Name"]+".json", "saves")

        # Sprawdzasz, czy plik istnieje
        if os.path.exists(save_dir):
            try:
                # Resetuje plik
                with open(save_dir, 'w') as file:
                    json.dump(default_stats, file, indent=4)
                #print(f"Plik {file_path} został zresetowany.")
            except Exception as e:
                # Obsługujesz ewentualny wyjątek, np. jeśli plik jest używany przez inny proces
                #print(f"Nie można zresetować pliku: {e}")
                pass
        else:
            #print(f"Plik {file_path} nie istnieje.")
            pass
                
    def loading_saves(self, name, bool = True):
        if bool:
            save_dir = get_config_path(name["Name"]+".json", "saves")
        else:
            save_dir = get_config_path(name+".json", "saves")
        
        if os.path.exists(save_dir):
            try:
                with open(save_dir, 'r') as file:
                    data = json.load(file)
                #print(f"Plik {save_dir} został załadowany.")
                return data
            except Exception as e:
                #print(f"Nie można załadować pliku: {e}")
                pass
        else:
            #print(f"Plik {save_dir} nie istnieje.")
            pass
                
    def del_saves(self, name):
        save_dir = get_config_path(name["Name"]+".json", "saves")

        # Sprawdzasz, czy plik istnieje
        if os.path.exists(save_dir):
            try:
                # Usuwasz plik
                os.remove(save_dir)
                self.saves.remove(name)
                #print(f"Plik {file_path} został usunięty.")
            except Exception as e:
                # Obsługujesz ewentualny wyjątek, np. jeśli plik jest używany przez inny proces
                #print(f"Nie można usunąć pliku: {e}")
                pass
        else:
            #print(f"Plik {file_path} nie istnieje.")
            pass
        
    def save_file(self, name, data = default_stats):
        save_dir = get_config_path("", "saves")
        with open(os.path.join(save_dir, name+".json"), 'w') as file:
            json.dump(data, file, indent=4)
        self.load_saves()
    